public void prints(string s)
public void printi(integer i)
public void println()
public integer atoi(string s)

integer cnt := 0;
integer ackermann (integer m, integer n) {
  cnt := cnt + 1
  if m = 0 then ackermann := n+1
  else if n = 0 then ackermann := ackermann(m-1, 1)
  else ackermann := ackermann(m-1, ackermann(m, n-1))
};

public integer entry (integer argc, string *argv, string *envp) {
  if argc > 2 then {
    printi(ackermann(atoi(argv[1]), atoi(argv[2])))
    prints(" #")
    printi(cnt)
    println()
  }
  entry := 0
};


2.1 - Módulo de manipulação de cadeias de carateres
    O módulo será designado string.diy (e não String.diy, STRING.DIY, STRING.diy ou outra variante 
    que a imaginação considere mais apropriada) e deverá conter os equivalentes em diy das rotinas de 
    C: strcmp, strcpy e strchr. (Como não existem carateres individuais na linguagem,
     o segundo argumento da rotina strchr é um integer) 
    A rotina strcmp deverá ser utilizada pelo compilador final para a comparação de cadeias de carateres. 

integer strcmp (string *str1, string *str2) {

  strcmp := 0; == default value
  
  integer len1 := strlen(str1);
  integer len2 := strlen(str2);

  if len1 = len2 then {
    for i in 0 upto len1 do {
      if str1[i] <> str2[i] then {
        strcmp := -1;
        break;
      }
    }
  }
};


integer strlen(char *s) {
  integer cnt := 0
  do {
    if s[cnt] <> null) then {
      cnt := cnt + 1;
      continue 1;
    }
    break;
  } while 1; 

  strlen := cnt
}